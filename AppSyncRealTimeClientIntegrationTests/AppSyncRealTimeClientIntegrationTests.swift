//
// Copyright 2018-2020 Amazon.com,
// Inc. or its affiliates. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

import XCTest
@testable import AppSyncRealTimeClient

class AppSyncRealTimeClientIntegrationTests: XCTestCase {

    var url: URL!
    var apiKey: String!

    override func setUp() {
        do {
            let json = try ConfigurationHelper.retrieve(forResource: "amplifyconfiguration")
            if let data = json as? [String: Any],
                let api = data["api"] as? [String: Any],
                let plugins = api["plugins"] as? [String: Any],
                let awsAPIPlugin = plugins["awsAPIPlugin"] as? [String: Any],
                let apiNameOptional = awsAPIPlugin.first,
                let apiName =  apiNameOptional.value as? [String: Any],
                let endpoint = apiName["endpoint"] as? String,
                let apiKey = apiName["apiKey"] as? String {

                url = URL(string: endpoint)
                self.apiKey = apiKey
            } else {
                throw "Could not retrieve endpoint"
            }

        } catch {
            print("Error \(error)")
        }
    }

    /// Simple integration test against an AppSync service provisioned with a simple Todo model generated by the
    /// GraphQL Transform on the `model` directive.
    ///
    /// - Given: A subscription connection on an AppSync endpoint with Todo model provisioned
    /// - When:
    ///    - Subscribe to the `onCreateTodo`
    /// - Then:
    ///    - Webosocket connection and subscription connection is established.
    ///
    func testSubscribeWithSubscriptionConnection() {
        let subscribeSuccess = expectation(description: "subscribe successfully")
        let authInterceptor = APIKeyAuthInterceptor(apiKey)
        let connectionProvider = ConnectionProviderFactory.createConnectionProvider(for: url,
                                                                                authInterceptor: authInterceptor,
                                                                                connectionType: .appSyncRealtime)

        let subscriptionConnection = AppSyncSubscriptionConnection(provider: connectionProvider)
        let requestString = """
                            subscription onCreate {
                              onCreateTodo{
                                id
                                description
                                name
                              }
                            }
                            """
        _ = subscriptionConnection.subscribe(requestString: requestString, variables: nil) { (event, item) in

            switch event {
            case .connection(let subscriptionConnectionEvent):
                switch subscriptionConnectionEvent {
                case .connecting:
                    break
                case .connected:
                    subscribeSuccess.fulfill()
                case .disconnected:
                    break
                }
            case .data(let data):
                print("Got data back \(data)")
            case .failed(let error):
                XCTFail("Got error \(error)")
            }
        }

        wait(for: [subscribeSuccess], timeout: TestCommonConstants.networkTimeout)
    }
}

